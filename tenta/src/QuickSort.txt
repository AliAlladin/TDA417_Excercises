-   In-place algorithm which doesnt require any extra space.

-   Choosing the pivot is crucial for the complexity of this algorithm.
    If we choose the first element as the pivot-point we will get very
    bad complexity if the array is almost sorted (since the smallest
    element would always be the pivot). A random pivot point is better
    alternative but median-of-three would be the best choice since
    this would gie us the highest probability of getting a pivot that
    is close to the center of the array.

public void quickSort (T[] array){
    quickSort(array, 0, array.size-1);
}

private void quickSort (T[] array, int lo, int hi){
    if (hi <= lo) {
        return;
    }
    int j = partition(a, lo, hi);
    sort(a, lo, j-1);
    sort(a, j+1, hi);
}

private int partition (T[] array, int lo, int hi){
    int median = median3(a,lo,(lo + hi)/2,hi);

    exch(a,lo,median);

    int i = lo;
    int j = hi + 1;
    int v = a[lo];

    while (a[++i] < v) {
        if (i == hi) {
            exch(a, lo, hi);
            return hi;
        }
    }

    while (v < a[--j]) {
        if (j == lo + 1){
            return lo;
        }
    }

    while (i < j) {
        exch(a, i, j);
        while (a[++i] < v) ;
        while (v < a[--j]) ;
    }

    exch(a, lo, j);

    return j;
}

private void exch(int[] a, int i, int j) {
    int tmp = a[i];
    a[i] = a[j];
    a[j] = tmp;
}

// return the index of the median element among a[i], a[j], and a[k]
private int median3(int[] a, int i, int j, int k) {
    if (a[i] <= a[j]) {
        if (a[j] <= a[k]) return j;      /* a[i] <= a[j] <= a[k] */
        else if (a[i] <= a[k]) return k; /* a[i] <= a[k] <  a[j] */
        else return i;                   /* a[k] <  a[i] <= a[j] */
    } else {
        if (a[k] <= a[j]) return j;      /* a[k] <= a[j] <  a[i] */
        else if (a[k] <= a[i]) return k; /* a[j] <  a[k] <= a[i] */
        else return i;                   /* a[j] <  a[i] <  a[k] */
    }
}

Best case       Avg. case       Worst case
O(n*log(n))     O(n*log(n))     O(n^2)